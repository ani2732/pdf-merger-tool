freepdfmerger.org

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Merger - Combine Multiple PDFs</title>
    <script src="https://unpkg.com/pdf-lib@1.17.1/dist/pdf-lib.min.js"></script>
    <script src="https://unpkg.com/downloadjs@1.4.7"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2980, #26d0ce);
            color: #333;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 30px 0;
            color: white;
        }
        
        h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            max-width: 600px;
            margin: 0 auto;
        }
        
        .app-container {
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
            margin-top: 20px;
        }
        
        .upload-section {
            flex: 1;
            min-width: 300px;
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        }
        
        .preview-section {
            flex: 1;
            min-width: 300px;
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
            display: flex;
            flex-direction: column;
        }
        
        .section-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: #1a2980;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .section-title i {
            font-size: 1.8rem;
        }
        
        .drop-area {
            border: 3px dashed #1a2980;
            border-radius: 10px;
            padding: 40px 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            background: #f8f9ff;
            margin-bottom: 20px;
        }
        
        .drop-area:hover, .drop-area.drag-over {
            background: #e6f0ff;
            border-color: #26d0ce;
        }
        
        .drop-area i {
            font-size: 3rem;
            color: #26d0ce;
            margin-bottom: 15px;
        }
        
        .drop-area h3 {
            margin-bottom: 10px;
            color: #1a2980;
        }
        
        .drop-area p {
            color: #666;
            margin-bottom: 20px;
        }
        
        .file-input {
            display: none;
        }
        
        .btn {
            background: linear-gradient(to right, #1a2980, #26d0ce);
            color: white;
            border: none;
            padding: 12px 25px;
            font-size: 1rem;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 4px 15px rgba(26, 41, 128, 0.3);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(26, 41, 128, 0.4);
        }
        
        .btn:active {
            transform: translateY(1px);
        }
        
        .btn-secondary {
            background: #6c757d;
        }
        
        .btn-danger {
            background: #dc3545;
        }
        
        .file-list {
            margin-top: 20px;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 10px;
            border-left: 4px solid #26d0ce;
        }
        
        .file-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .file-icon {
            color: #e74c3c;
            font-size: 1.5rem;
        }
        
        .file-name {
            font-weight: 500;
        }
        
        .file-size {
            font-size: 0.85rem;
            color: #6c757d;
        }
        
        .file-actions {
            display: flex;
            gap: 8px;
        }
        
        .action-btn {
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            font-size: 1.1rem;
            transition: color 0.2s;
        }
        
        .action-btn:hover {
            color: #1a2980;
        }
        
        .preview-container {
            flex: 1;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            background: #f8f9ff;
            min-height: 300px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }
        
        .preview-placeholder i {
            font-size: 5rem;
            color: #26d0ce;
            opacity: 0.3;
            margin-bottom: 20px;
        }
        
        .preview-placeholder h3 {
            color: #6c757d;
            font-weight: 400;
        }
        
        .action-buttons {
            display: flex;
            gap: 15px;
            margin-top: 25px;
            flex-wrap: wrap;
        }
        
        .status {
            margin-top: 20px;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            display: none;
        }
        
        .status.success {
            background: #d4edda;
            color: #155724;
            display: block;
        }
        
        .status.error {
            background: #f8d7da;
            color: #721c24;
            display: block;
        }
        
        .progress-container {
            margin-top: 20px;
            display: none;
        }
        
        .progress-bar {
            height: 10px;
            background: #e9ecef;
            border-radius: 5px;
            overflow: hidden;
        }
        
        .progress {
            height: 100%;
            background: linear-gradient(to right, #1a2980, #26d0ce);
            width: 0%;
            transition: width 0.3s;
        }
        
        .instructions {
            background: white;
            border-radius: 12px;
            padding: 30px;
            margin-top: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        }
        
        .instructions h2 {
            color: #1a2980;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .steps {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
        }
        
        .step {
            flex: 1;
            min-width: 250px;
            text-align: center;
            padding: 20px;
            background: #f8f9ff;
            border-radius: 10px;
        }
        
        .step-number {
            display: inline-block;
            width: 40px;
            height: 40px;
            background: #1a2980;
            color: white;
            border-radius: 50%;
            line-height: 40px;
            font-weight: bold;
            margin-bottom: 15px;
        }
        
        .features {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 30px;
        }
        
        .feature {
            flex: 1;
            min-width: 200px;
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            color: white;
        }
        
        .feature i {
            font-size: 2.5rem;
            margin-bottom: 15px;
            color: #fff;
        }
        
        footer {
            text-align: center;
            color: white;
            padding: 30px 0;
            margin-top: 30px;
            opacity: 0.8;
        }
        
        @media (max-width: 768px) {
            .app-container {
                flex-direction: column;
            }
            
            .action-buttons {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-file-pdf"></i> PDF Merger</h1>
            <p class="subtitle">Combine multiple PDF files into one document in seconds. Fast, secure, and completely free!</p>
        </header>
        
        <div class="app-container">
            <div class="upload-section">
                <h2 class="section-title"><i class="fas fa-cloud-upload-alt"></i> Upload PDF Files</h2>
                
                <div class="drop-area" id="dropArea">
                    <i class="fas fa-file-pdf"></i>
                    <h3>Drag & Drop PDF Files Here</h3>
                    <p>or click to browse your files</p>
                    <button class="btn" id="browseBtn">
                        <i class="fas fa-folder-open"></i> Select Files
                    </button>
                    <input type="file" id="fileInput" class="file-input" accept=".pdf" multiple>
                </div>
                
                <div class="file-list" id="fileList">
                    <!-- File items will be added here dynamically -->
                </div>
                
                <div class="action-buttons">
                    <button class="btn" id="mergeBtn">
                        <i class="fas fa-object-group"></i> Merge PDFs
                    </button>
                    <button class="btn btn-secondary" id="clearBtn">
                        <i class="fas fa-trash-alt"></i> Clear All
                    </button>
                </div>
                
                <div class="progress-container" id="progressContainer">
                    <div class="progress-bar">
                        <div class="progress" id="progressBar"></div>
                    </div>
                    <p id="progressText">Processing...</p>
                </div>
                
                <div class="status" id="statusMessage"></div>
            </div>
            
            <div class="preview-section">
                <h2 class="section-title"><i class="fas fa-eye"></i> Preview</h2>
                
                <div class="preview-container">
                    <div class="preview-placeholder" id="previewPlaceholder">
                        <i class="fas fa-file-pdf"></i>
                        <h3>Your merged PDF will appear here</h3>
                    </div>
                    <canvas id="pdfPreview" style="display: none; max-width: 100%;"></canvas>
                </div>
                
                <div class="action-buttons" id="downloadSection" style="display: none;">
                    <button class="btn" id="downloadBtn">
                        <i class="fas fa-download"></i> Download Merged PDF
                    </button>
                    <button class="btn btn-secondary" id="newMergeBtn">
                        <i class="fas fa-sync-alt"></i> Start New Merge
                    </button>
                </div>
            </div>
        </div>
        
        <div class="features">
            <div class="feature">
                <i class="fas fa-shield-alt"></i>
                <h3>100% Secure</h3>
                <p>Files never leave your browser</p>
            </div>
            <div class="feature">
                <i class="fas fa-bolt"></i>
                <h3>Lightning Fast</h3>
                <p>Merge PDFs in seconds</p>
            </div>
            <div class="feature">
                <i class="fas fa-infinity"></i>
                <h3>No Limits</h3>
                <p>Merge as many files as you need</p>
            </div>
            <div class="feature">
                <i class="fas fa-lock"></i>
                <h3>Private</h3>
                <p>No uploads, no tracking</p>
            </div>
        </div>
        
        <div class="instructions">
            <h2>How to Merge PDF Files</h2>
            <div class="steps">
                <div class="step">
                    <div class="step-number">1</div>
                    <h3>Select Files</h3>
                    <p>Choose PDF files from your device or drag and drop them</p>
                </div>
                <div class="step">
                    <div class="step-number">2</div>
                    <h3>Arrange Order</h3>
                    <p>Drag files to reorder them as needed</p>
                </div>
                <div class="step">
                    <div class="step-number">3</div>
                    <h3>Merge PDFs</h3>
                    <p>Click the Merge button to combine your files</p>
                </div>
                <div class="step">
                    <div class="step-number">4</div>
                    <h3>Download</h3>
                    <p>Save your merged PDF to your device</p>
                </div>
            </div>
        </div>
        
        <footer>
            <p>PDF Merger &copy; 2023 | All processing happens in your browser - your files are never uploaded to any server</p>
        </footer>
    </div>

    <script>
        // DOM Elements
        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('fileInput');
        const browseBtn = document.getElementById('browseBtn');
        const fileList = document.getElementById('fileList');
        const mergeBtn = document.getElementById('mergeBtn');
        const clearBtn = document.getElementById('clearBtn');
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const statusMessage = document.getElementById('statusMessage');
        const previewPlaceholder = document.getElementById('previewPlaceholder');
        const pdfPreview = document.getElementById('pdfPreview');
        const downloadSection = document.getElementById('downloadSection');
        const downloadBtn = document.getElementById('downloadBtn');
        const newMergeBtn = document.getElementById('newMergeBtn');
        
        // Store selected files
        let pdfFiles = [];
        let mergedPdf = null;
        
        // Event listeners
        browseBtn.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', handleFileSelect);
        dropArea.addEventListener('dragover', handleDragOver);
        dropArea.addEventListener('dragleave', handleDragLeave);
        dropArea.addEventListener('drop', handleDrop);
        mergeBtn.addEventListener('click', mergePdfs);
        clearBtn.addEventListener('click', clearAll);
        downloadBtn.addEventListener('click', downloadMergedPdf);
        newMergeBtn.addEventListener('click', resetApp);
        
        // Handle file selection
        function handleFileSelect(e) {
            const files = e.target.files;
            addFilesToArray(files);
            renderFileList();
        }
        
        // Handle drag over
        function handleDragOver(e) {
            e.preventDefault();
            dropArea.classList.add('drag-over');
        }
        
        // Handle drag leave
        function handleDragLeave(e) {
            e.preventDefault();
            dropArea.classList.remove('drag-over');
        }
        
        // Handle drop
        function handleDrop(e) {
            e.preventDefault();
            dropArea.classList.remove('drag-over');
            
            const files = e.dataTransfer.files;
            addFilesToArray(files);
            renderFileList();
        }
        
        // Add files to array
        function addFilesToArray(files) {
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                if (file.type === 'application/pdf') {
                    pdfFiles.push({
                        file: file,
                        name: file.name,
                        size: formatFileSize(file.size),
                        id: Date.now() + i
                    });
                }
            }
        }
        
        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        // Render file list
        function renderFileList() {
            if (pdfFiles.length === 0) {
                fileList.innerHTML = '<p>No files selected</p>';
                return;
            }
            
            fileList.innerHTML = '';
            
            pdfFiles.forEach((pdf, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.draggable = true;
                fileItem.dataset.index = index;
                
                fileItem.innerHTML = `
                    <div class="file-info">
                        <i class="fas fa-file-pdf file-icon"></i>
                        <div>
                            <div class="file-name">${pdf.name}</div>
                            <div class="file-size">${pdf.size}</div>
                        </div>
                    </div>
                    <div class="file-actions">
                        <button class="action-btn move-up" title="Move Up">
                            <i class="fas fa-arrow-up"></i>
                        </button>
                        <button class="action-btn move-down" title="Move Down">
                            <i class="fas fa-arrow-down"></i>
                        </button>
                        <button class="action-btn remove-file" title="Remove">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                fileList.appendChild(fileItem);
            });
            
            // Add event listeners for new buttons
            document.querySelectorAll('.remove-file').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const index = e.target.closest('.file-item').dataset.index;
                    removeFile(index);
                });
            });
            
            document.querySelectorAll('.move-up').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const index = parseInt(e.target.closest('.file-item').dataset.index);
                    if (index > 0) {
                        moveFile(index, index - 1);
                    }
                });
            });
            
            document.querySelectorAll('.move-down').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const index = parseInt(e.target.closest('.file-item').dataset.index);
                    if (index < pdfFiles.length - 1) {
                        moveFile(index, index + 1);
                    }
                });
            });
            
            // Add drag and drop for reordering
            const fileItems = document.querySelectorAll('.file-item');
            fileItems.forEach(item => {
                item.addEventListener('dragstart', handleDragStart);
                item.addEventListener('dragover', handleItemDragOver);
                item.addEventListener('drop', handleItemDrop);
                item.addEventListener('dragend', handleDragEnd);
            });
        }
        
        // Drag and drop for reordering
        let draggedItem = null;
        
        function handleDragStart(e) {
            draggedItem = this;
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/plain', this.dataset.index);
            setTimeout(() => this.classList.add('dragging'), 0);
        }
        
        function handleItemDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            return false;
        }
        
        function handleItemDrop(e) {
            e.preventDefault();
            const targetIndex = this.dataset.index;
            const sourceIndex = e.dataTransfer.getData('text/plain');
            
            if (sourceIndex !== targetIndex) {
                moveFile(parseInt(sourceIndex), parseInt(targetIndex));
            }
            
            return false;
        }
        
        function handleDragEnd() {
            this.classList.remove('dragging');
        }
        
        // Move file in array
        function moveFile(fromIndex, toIndex) {
            const fileToMove = pdfFiles.splice(fromIndex, 1)[0];
            pdfFiles.splice(toIndex, 0, fileToMove);
            renderFileList();
        }
        
        // Remove file
        function removeFile(index) {
            pdfFiles.splice(index, 1);
            renderFileList();
        }
        
        // Clear all files
        function clearAll() {
            pdfFiles = [];
            renderFileList();
            statusMessage.className = 'status';
            statusMessage.style.display = 'none';
        }
        
        // Merge PDFs
        async function mergePdfs() {
            if (pdfFiles.length === 0) {
                showStatus('Please select at least one PDF file', 'error');
                return;
            }
            
            if (pdfFiles.length === 1) {
                showStatus('You need at least two files to merge', 'error');
                return;
            }
            
            try {
                // Show progress
                progressContainer.style.display = 'block';
                progressBar.style.width = '10%';
                progressText.textContent = 'Starting merge...';
                
                // Create new PDF
                const { PDFDocument } = PDFLib;
                const mergedPdf = await PDFDocument.create();
                
                // Process each PDF
                for (let i = 0; i < pdfFiles.length; i++) {
                    progressBar.style.width = `${10 + (i / pdfFiles.length) * 80}%`;
                    progressText.textContent = `Processing file ${i + 1} of ${pdfFiles.length}...`;
                    
                    const pdfFile = pdfFiles[i].file;
                    const pdfBytes = await readFileAsArrayBuffer(pdfFile);
                    
                    try {
                        const pdf = await PDFDocument.load(pdfBytes);
                        const pages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());
                        pages.forEach(page => mergedPdf.addPage(page));
                    } catch (error) {
                        console.error(`Error processing file ${pdfFiles[i].name}:`, error);
                        showStatus(`Error processing ${pdfFiles[i].name}. The file may be corrupted or encrypted.`, 'error');
                        progressContainer.style.display = 'none';
                        return;
                    }
                }
                
                // Finalize
                progressBar.style.width = '95%';
                progressText.textContent = 'Finalizing merged PDF...';
                
                const mergedPdfBytes = await mergedPdf.save();
                
                // Store merged PDF
                window.mergedPdfBytes = mergedPdfBytes;
                
                // Show success
                progressBar.style.width = '100%';
                progressText.textContent = 'Merge complete!';
                
                setTimeout(() => {
                    progressContainer.style.display = 'none';
                    showStatus('PDFs merged successfully!', 'success');
                    showDownloadSection();
                    renderPdfPreview(mergedPdfBytes);
                }, 1000);
                
            } catch (error) {
                console.error('Error merging PDFs:', error);
                showStatus('Error merging PDFs: ' + error.message, 'error');
                progressContainer.style.display = 'none';
            }
        }
        
        // Read file as ArrayBuffer
        function readFileAsArrayBuffer(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result);
                reader.onerror = reject;
                reader.readAsArrayBuffer(file);
            });
        }
        
        // Show status message
        function showStatus(message, type) {
            statusMessage.textContent = message;
            statusMessage.className = `status ${type}`;
            statusMessage.style.display = 'block';
        }
        
        // Show download section
        function showDownloadSection() {
            downloadSection.style.display = 'flex';
        }
        
        // Download merged PDF
        function downloadMergedPdf() {
            if (!window.mergedPdfBytes) {
                showStatus('No merged PDF available', 'error');
                return;
            }
            
            const blob = new Blob([window.mergedPdfBytes], { type: 'application/pdf' });
            download(blob, 'merged-document.pdf', 'application/pdf');
        }
        
        // Render PDF preview
        async function renderPdfPreview(pdfBytes) {
            try {
                // Hide placeholder and show canvas
                previewPlaceholder.style.display = 'none';
                pdfPreview.style.display = 'block';
                
                // Render first page of PDF
                const { PDFDocument } = PDFLib;
                const pdfDoc = await PDFDocument.load(pdfBytes);
                const page = pdfDoc.getPage(0);
                
                // Get PDF dimensions
                const viewport = page.getSize();
                
                // Set canvas dimensions
                pdfPreview.width = viewport.width;
                pdfPreview.height = viewport.height;
                
                // Render PDF page to canvas
                const renderContext = {
                    canvasContext: pdfPreview.getContext('2d'),
                    viewport: viewport
                };
                
                await page.render(renderContext).promise;
                
            } catch (error) {
                console.error('Error rendering preview:', error);
                previewPlaceholder.innerHTML = `
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Preview unavailable</h3>
                    <p>Your merged PDF is ready for download</p>
                `;
                previewPlaceholder.style.display = 'block';
                pdfPreview.style.display = 'none';
            }
        }
        
        // Reset app for new merge
        function resetApp() {
            pdfFiles = [];
            window.mergedPdfBytes = null;
            renderFileList();
            statusMessage.className = 'status';
            statusMessage.style.display = 'none';
            downloadSection.style.display = 'none';
            previewPlaceholder.style.display = 'block';
            pdfPreview.style.display = 'none';
        }
        
        // Initialize
        renderFileList();
    </script>
</body>
</html>
